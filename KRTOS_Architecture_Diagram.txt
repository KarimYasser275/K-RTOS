K-RTOS SYSTEM ARCHITECTURE
================================================================================

┌─────────────────────────────────────────────────────────────────────────────────┐
│                              APPLICATION LAYER                                  │
├─────────────────────────────────────────────────────────────────────────────────┤
│                                                                                 │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐           │
│  │   Task 0    │  │   Task 1    │  │   Task 2    │  │   Task 3    │           │
│  │             │  │             │  │             │  │ (Periodic)  │           │
│  │ while(1) {  │  │ while(1) {  │  │ while(1) {  │  │             │           │
│  │   counter++;│  │   counter++;│  │   counter++;│  │ counter++;  │           │
│  │   yield();  │  │ }           │  │ }           │  │ }           │           │
│  │ }           │  │             │  │             │  │             │           │
│  └─────────────┘  └─────────────┘  └─────────────┘  └─────────────┘           │
│         │                 │                 │                 │               │
│         └─────────────────┼─────────────────┼─────────────────┘               │
│                           │                 │                                 │
└───────────────────────────┼─────────────────┼─────────────────────────────────┘
                            │                 │
┌───────────────────────────┼─────────────────┼─────────────────────────────────┐
│                           │                 │                                 │
│                    K-RTOS KERNEL LAYER                                       │
│  ┌─────────────────────────────────────────────────────────────────────┐     │
│  │                                                                     │     │
│  │  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────────┐     │     │
│  │  │   TASK CONTROL  │  │    SCHEDULER    │  │   TIME BASE      │     │     │
│  │  │     BLOCK       │  │                 │  │                 │     │     │
│  │  │                 │  │ ┌─────────────┐ │  │ ┌─────────────┐ │     │     │
│  │  │ ┌─────────────┐ │  │ │Round Robin  │ │  │ │SysTick Timer│ │     │     │
│  │  │ │TCB Array    │ │  │ │Scheduler    │ │  │ │             │ │     │     │
│  │  │ │             │ │  │ │             │ │  │ │1ms Period   │ │     │     │
│  │  │ │[TCB0]───────┼─┼──┼─┼─────────────┼─┼──┼─┼─────────────┼─┼─────┼─────┤
│  │  │ │[TCB1]───────┼─┼──┼─┼─────────────┼─┼──┼─┼─────────────┼─┼─────┼─────┤
│  │  │ │[TCB2]───────┼─┼──┼─┼─────────────┼─┼──┼─┼─────────────┼─┼─────┼─────┤
│  │  │ └─────────────┘ │  │ └─────────────┘ │  │ └─────────────┘ │     │     │
│  │  │                 │  │                 │  │                 │     │     │
│  │  │ • Stack Mgmt    │  │ • Context Switch│  │ • Tick Counter  │     │     │
│  │  │ • Thread State  │  │ • Thread Yield  │  │ • Delay Func    │     │     │
│  │  │ • Priority      │  │ • Periodic Exec │  │ • Time Config   │     │     │
│  │  └─────────────────┘  └─────────────────┘  └─────────────────┘     │     │
│  └─────────────────────────────────────────────────────────────────────┘     │
│                           │                 │                                 │
└───────────────────────────┼─────────────────┼─────────────────────────────────┘
                            │                 │
┌───────────────────────────┼─────────────────┼─────────────────────────────────┐
│                           │                 │                                 │
│                    HARDWARE ABSTRACTION LAYER                                │
│  ┌─────────────────────────────────────────────────────────────────────┐     │
│  │                                                                     │     │
│  │  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────────┐     │     │
│  │  │   STM32F103     │  │     CMSIS       │  │   SYSTEM CALLS  │     │     │
│  │  │   REGISTERS     │  │                 │  │                 │     │     │
│  │  │                 │  │ ┌─────────────┐ │  │ ┌─────────────┐ │     │     │
│  │  │ ┌─────────────┐ │  │ │Core Periph  │ │  │ │Memory Mgmt  │ │     │     │
│  │  │ │RCC_APB2ENR  │ │  │ │             │ │  │ │             │ │     │     │
│  │  │ │GPIOC_CRH    │ │  │ │NVIC         │ │  │ │malloc()     │ │     │     │
│  │  │ │SysTick_CTRL │ │  │ │SysTick      │ │  │ │free()       │ │     │     │
│  │  │ │SysTick_LOAD │ │  │ │Interrupts   │ │  │ │             │ │     │     │
│  │  │ │SysTick_VAL  │ │  │ │             │ │  │ │I/O Functions│ │     │     │
│  │  │ └─────────────┘ │  │ └─────────────┘ │  │ │_read()      │ │     │     │
│  │  │                 │  │                 │  │ │_write()     │ │     │     │
│  │  │ • Clock Config  │  │ • Interrupt Mgmt│  │ │             │ │     │     │
│  │  │ • GPIO Control  │  │ • Exception Hand│  │ │File Ops     │ │     │     │
│  │  │ • Timer Config  │  │ • Core Access   │  │ │(stubs)      │ │     │     │
│  │  └─────────────────┘  └─────────────────┘  └─────────────────┘     │     │
│  └─────────────────────────────────────────────────────────────────────┘     │
│                           │                 │                                 │
└───────────────────────────┼─────────────────┼─────────────────────────────────┘
                            │                 │
┌───────────────────────────┼─────────────────┼─────────────────────────────────┐
│                           │                 │                                 │
│                        HARDWARE PLATFORM                                     │
│  ┌─────────────────────────────────────────────────────────────────────┐     │
│  │                                                                     │     │
│  │                    STM32F103C8Tx Microcontroller                    │     │
│  │                                                                     │     │
│  │  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────────┐     │     │
│  │  │   ARM Cortex-M3 │  │   Flash Memory  │  │   SRAM Memory   │     │     │
│  │  │   Core (72MHz)  │  │   (64KB)        │  │   (20KB)        │     │     │
│  │  │                 │  │                 │  │                 │     │     │
│  │  │ • 32-bit RISC   │  │ • Program Code  │  │ • Global Vars   │     │     │
│  │  │ • Thumb-2 ISA   │  │ • Vector Table  │  │ • TCB Array     │     │     │
│  │  │ • 3-Stage Pipe  │  │ • Constants     │  │ • Thread Stacks │     │     │
│  │  │ • NVIC          │  │ • Startup Code  │  │ • Heap/Stack    │     │     │
│  │  └─────────────────┘  └─────────────────┘  └─────────────────┘     │     │
│  └─────────────────────────────────────────────────────────────────────┘     │
└─────────────────────────────────────────────────────────────────────────────────┘

CONTEXT SWITCHING FLOW
================================================================================

┌─────────────────────────────────────────────────────────────────────────────────┐
│                              CONTEXT SWITCH SEQUENCE                            │
├─────────────────────────────────────────────────────────────────────────────────┤
│                                                                                 │
│  ┌─────────────┐    ┌─────────────┐    ┌─────────────┐    ┌─────────────┐     │
│  │   Task 0    │    │ SysTick     │    │   Task 1    │    │   Task 2    │     │
│  │ Execution   │───▶│ Interrupt   │───▶│ Execution   │───▶│ Execution   │     │
│  │             │    │             │    │             │    │             │     │
│  └─────────────┘    └─────────────┘    └─────────────┘    └─────────────┘     │
│         │                   │                   │                   │         │
│         │                   │                   │                   │         │
│         ▼                   ▼                   ▼                   ▼         │
│  ┌─────────────┐    ┌─────────────┐    ┌─────────────┐    ┌─────────────┐     │
│  │ Save Context│    │ Context     │    │ Save Context│    │ Save Context│     │
│  │ R4-R11      │    │ Switch      │    │ R4-R11      │    │ R4-R11      │     │
│  │ Save SP     │    │ Logic       │    │ Save SP     │    │ Save SP     │     │
│  └─────────────┘    └─────────────┘    └─────────────┘    └─────────────┘     │
│         │                   │                   │                   │         │
│         │                   │                   │                   │         │
│         ▼                   ▼                   ▼                   ▼         │
│  ┌─────────────┐    ┌─────────────┐    ┌─────────────┐    ┌─────────────┐     │
│  │ Load Context│    │ Periodic    │    │ Load Context│    │ Load Context│     │
│  │ R4-R11      │    │ Scheduler   │    │ R4-R11      │    │ R4-R11      │     │
│  │ Restore SP  │    │ Check       │    │ Restore SP  │    │ Restore SP  │     │
│  └─────────────┘    └─────────────┘    └─────────────┘    └─────────────┘     │
│                                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

MEMORY LAYOUT
================================================================================

┌─────────────────────────────────────────────────────────────────────────────────┐
│                              MEMORY MAP                                        │
├─────────────────────────────────────────────────────────────────────────────────┤
│                                                                                 │
│  0x08000000 ──▶ FLASH MEMORY (64KB)                                            │
│  ┌─────────────────────────────────────────────────────────────────────┐       │
│  │ Vector Table (0x08000000)                                          │       │
│  │ Reset_Handler                                                      │       │
│  │ SysTick_Handler                                                    │       │
│  │ Other Interrupt Handlers                                           │       │
│  ├─────────────────────────────────────────────────────────────────────┤       │
│  │ Program Code                                                       │       │
│  │ main()                                                             │       │
│  │ Task Functions                                                     │       │
│  │ Kernel Functions                                                   │       │
│  └─────────────────────────────────────────────────────────────────────┘       │
│                                                                                 │
│  0x20000000 ──▶ SRAM MEMORY (20KB)                                             │
│  ┌─────────────────────────────────────────────────────────────────────┐       │
│  │ Global Variables                                                   │       │
│  │ uint32_t Task0_counter, Task1_counter, Task2_counter, Task3_counter│       │
│  │ TCBType tcbs[TASKS_MAX_NUM]                                        │       │
│  │ TCB_peridoic_t periodic_tasks[TASKS_MAX_NUM]                       │       │
│  ├─────────────────────────────────────────────────────────────────────┤       │
│  │ Thread Stacks                                                      │       │
│  │ ┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐       │       │
│  │ │   Task 0 Stack  │ │   Task 1 Stack  │ │   Task 2 Stack  │       │       │
│  │ │   (400 bytes)   │ │   (400 bytes)   │ │   (400 bytes)   │       │       │
│  │ └─────────────────┘ └─────────────────┘ └─────────────────┘       │       │
│  ├─────────────────────────────────────────────────────────────────────┤       │
│  │ Heap Memory                                                        │       │
│  │ Dynamic allocations (malloc/free)                                  │       │
│  └─────────────────────────────────────────────────────────────────────┘       │
│                                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

STACK LAYOUT FOR EACH THREAD
================================================================================

┌─────────────────────────────────────────────────────────────────────────────────┐
│                              THREAD STACK STRUCTURE                            │
├─────────────────────────────────────────────────────────────────────────────────┤
│                                                                                 │
│  ┌─────────────────────────────────────────────────────────────────────┐       │
│  │                    Stack Layout (400 bytes)                        │       │
│  │                                                                     │       │
│  │  ┌─────────────────┐ ← Stack Top (Initial SP)                      │       │
│  │  │     PSR         │ Program Status Register                       │       │
│  │  │   (0x01000000)  │ T-bit set for Thumb mode                      │       │
│  │  ├─────────────────┤                                               │       │
│  │  │     PC          │ Program Counter (Task Function Address)       │       │
│  │  │ (callback_fn)   │ Points to task entry point                    │       │
│  │  ├─────────────────┤                                               │       │
│  │  │     LR          │ Link Register (0xAAAAAAAA for debug)          │       │
│  │  ├─────────────────┤                                               │       │
│  │  │     R12         │ Register 12 (0xAAAAAAAA for debug)            │       │
│  │  ├─────────────────┤                                               │       │
│  │  │     R3          │ Register 3 (0xAAAAAAAA for debug)             │       │
│  │  ├─────────────────┤                                               │
│  │  │     R2          │ Register 2 (0xAAAAAAAA for debug)             │       │
│  │  ├─────────────────┤                                               │       │
│  │  │     R1          │ Register 1 (0xAAAAAAAA for debug)             │       │
│  │  ├─────────────────┤                                               │       │
│  │  │     R0          │ Register 0 (0xAAAAAAAA for debug)             │       │
│  │  ├─────────────────┤                                               │       │
│  │  │     R11         │ Register 11 (0xAAAAAAAA for debug)            │       │
│  │  ├─────────────────┤                                               │       │
│  │  │     R10         │ Register 10 (0xAAAAAAAA for debug)            │       │
│  │  ├─────────────────┤                                               │       │
│  │  │     R9          │ Register 9 (0xAAAAAAAA for debug)             │       │
│  │  ├─────────────────┤                                               │       │
│  │  │     R8          │ Register 8 (0xAAAAAAAA for debug)             │       │
│  │  ├─────────────────┤                                               │       │
│  │  │     R7          │ Register 7 (0xAAAAAAAA for debug)             │       │
│  │  ├─────────────────┤                                               │       │
│  │  │     R6          │ Register 6 (0xAAAAAAAA for debug)             │       │
│  │  │  ├─────────────────┤                                               │       │
│  │  │     R5          │ Register 5 (0xAAAAAAAA for debug)             │       │
│  │  ├─────────────────┤                                               │       │
│  │  │     R4          │ Register 4 (0xAAAAAAAA for debug)             │       │
│  │  └─────────────────┘ ← Current Stack Pointer (SP)                  │       │
│  │                                                                     │       │
│  │  ┌─────────────────┐ ← Stack Bottom                                │       │
│  │  │   Local Vars    │ Task local variables                          │       │
│  │  │   Parameters    │ Function parameters                           │       │
│  │  │   Return Addr   │ Return addresses                              │       │
│  │  └─────────────────┘                                               │       │
│  └─────────────────────────────────────────────────────────────────────┘       │
│                                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

INTERRUPT HANDLING
================================================================================

┌─────────────────────────────────────────────────────────────────────────────────┐
│                              INTERRUPT VECTOR TABLE                            │
├─────────────────────────────────────────────────────────────────────────────────┤
│                                                                                 │
│  ┌─────────────────────────────────────────────────────────────────────┐       │
│  │                    Vector Table (0x08000000)                       │       │
│  │                                                                     │       │
│  │  0x08000000: _estack                    (Initial Stack Pointer)    │       │
│  │  0x08000004: Reset_Handler              (System Reset)             │       │
│  │  0x08000008: NMI_Handler                (Non-Maskable Interrupt)   │       │
│  │  0x0800000C: HardFault_Handler          (Hard Fault)               │       │
│  │  0x08000010: MemManage_Handler          (Memory Management Fault)  │       │
│  │  0x08000014: BusFault_Handler           (Bus Fault)                │       │
│  │  0x08000018: UsageFault_Handler         (Usage Fault)              │       │
│  │  0x0800001C: 0                          (Reserved)                 │       │
│  │  0x08000020: 0                          (Reserved)                 │       │
│  │  0x08000024: 0                          (Reserved)                 │       │
│  │  0x08000028: 0                          (Reserved)                 │       │
│  │  0x0800002C: SVC_Handler                (Supervisor Call)          │       │
│  │  0x08000030: DebugMon_Handler           (Debug Monitor)            │       │
│  │  0x08000034: 0                          (Reserved)                 │       │
│  │  0x08000038: PendSV_Handler             (Pendable Service Call)    │       │
│  │  0x0800003C: SysTick_Handler            (System Tick Timer)        │       │
│  │                                                                     │       │
│  │  ┌─────────────────────────────────────────────────────────────┐   │       │
│  │  │                SysTick_Handler Flow                        │   │       │
│  │  │                                                             │   │       │
│  │  │  1. Disable interrupts (CPSID I)                           │   │       │
│  │  │  2. Save R4-R11 to current stack                           │   │       │
│  │  │  3. Save current SP to TCB                                 │   │       │
│  │  │  4. Call osKernel_peridoicScheduler()                      │   │       │
│  │  │  5. Load next thread's SP from TCB                         │   │       │
│  │  │  6. Restore R4-R11 from new stack                          │   │       │
│  │  │  7. Enable interrupts (CPSIE I)                            │   │       │
│  │  │  8. Return from exception (BX LR)                          │   │       │
│  │  └─────────────────────────────────────────────────────────────┘   │       │
│  └─────────────────────────────────────────────────────────────────────┘       │
│                                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

SCHEDULING ALGORITHMS
================================================================================

┌─────────────────────────────────────────────────────────────────────────────────┐
│                              SCHEDULING MECHANISMS                             │
├─────────────────────────────────────────────────────────────────────────────────┤
│                                                                                 │
│  ┌─────────────────────────────────────────────────────────────────────┐       │
│  │                    ROUND-ROBIN SCHEDULER                            │       │
│  │                                                                     │       │
│  │  ┌─────────────┐    ┌─────────────┐    ┌─────────────┐             │       │
│  │  │   Task 0    │───▶│   Task 1    │───▶│   Task 2    │             │       │
│  │  │             │    │             │    │             │             │       │
│  │  │ • Executes  │    │ • Executes  │    │ • Executes  │             │       │
│  │  │ • Yields    │    │ • Yields    │    │ • Yields    │             │       │
│  │  │ • Next Task │    │ • Next Task │    │ • Next Task │             │       │
│  │  └─────────────┘    └─────────────┘    └─────────────┘             │       │
│  │         ▲                                    │                     │       │
│  │         └────────────────────────────────────┘                     │       │
│  └─────────────────────────────────────────────────────────────────────┘       │
│                                                                                 │
│  ┌─────────────────────────────────────────────────────────────────────┐       │
│  │                    PERIODIC SCHEDULER                              │       │
│  │                                                                     │       │
│  │  ┌─────────────────────────────────────────────────────────────┐   │       │
│  │  │                Tick Counter (0-999)                        │   │       │
│  │  │                                                             │   │       │
│  │  │  0 ──▶ 1 ──▶ 2 ──▶ ... ──▶ 99 ──▶ 100 ──▶ ... ──▶ 999 ──▶ 0 │   │       │
│  │  └─────────────────────────────────────────────────────────────┘   │       │
│  │                                                                     │       │
│  │  ┌─────────────────────────────────────────────────────────────┐   │       │
│  │  │                Periodic Task Execution                     │   │       │
│  │  │                                                             │   │       │
│  │  │  Task3: Execute when (counter % 100) == 0                  │   │       │
│  │  │  Task4: Execute when (counter % 200) == 0                  │   │       │
│  │  │  Task5: Execute when (counter % 500) == 0                  │   │       │
│  │  └─────────────────────────────────────────────────────────────┘   │       │
│  └─────────────────────────────────────────────────────────────────────┘       │
│                                                                                 │
│  ┌─────────────────────────────────────────────────────────────────────┐       │
│  │                    COOPERATIVE SCHEDULER                          │       │
│  │                                                                     │       │
│  │  ┌─────────────┐    ┌─────────────┐    ┌─────────────┐             │       │
│  │  │   Task 0    │    │   Task 1    │    │   Task 2    │             │       │
│  │  │             │    │             │    │             │             │       │
│  │  │ while(1) {  │    │ while(1) {  │    │ while(1) {  │             │       │
│  │  │   work();   │    │   work();   │    │   work();   │             │       │
│  │  │   yield();  │    │   yield();  │    │   yield();  │             │       │
│  │  │ }           │    │ }           │    │ }           │             │       │
│  │  └─────────────┘    └─────────────┘    └─────────────┘             │       │
│  │                                                                     │       │
│  │  • Tasks voluntarily yield control                                  │       │
│  │  • No preemption except SysTick timer                              │       │
│  │  • Predictable execution order                                     │       │
│  └─────────────────────────────────────────────────────────────────────┘       │
│                                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘ 