
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007d8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000908  08000908  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000908  08000908  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08000908  08000908  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000908  08000908  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000908  08000908  00010908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800090c  0800090c  0001090c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08000910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000050  08000960  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08000960  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e3c  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000641  00000000  00000000  00020ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000108  00000000  00000000  00021540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b1  00000000  00000000  00021648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010bbd  00000000  00000000  000216f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000019a9  00000000  00000000  000322b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00056b5b  00000000  00000000  00033c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000005d4  00000000  00000000  0008a7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  0008ad90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000050 	.word	0x20000050
 800014c:	00000000 	.word	0x00000000
 8000150:	080008f0 	.word	0x080008f0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000054 	.word	0x20000054
 800016c:	080008f0 	.word	0x080008f0

08000170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	6039      	str	r1, [r7, #0]
 800017a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000180:	2b00      	cmp	r3, #0
 8000182:	db0a      	blt.n	800019a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	b2da      	uxtb	r2, r3
 8000188:	490c      	ldr	r1, [pc, #48]	; (80001bc <__NVIC_SetPriority+0x4c>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	0112      	lsls	r2, r2, #4
 8000190:	b2d2      	uxtb	r2, r2
 8000192:	440b      	add	r3, r1
 8000194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000198:	e00a      	b.n	80001b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	b2da      	uxtb	r2, r3
 800019e:	4908      	ldr	r1, [pc, #32]	; (80001c0 <__NVIC_SetPriority+0x50>)
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	f003 030f 	and.w	r3, r3, #15
 80001a6:	3b04      	subs	r3, #4
 80001a8:	0112      	lsls	r2, r2, #4
 80001aa:	b2d2      	uxtb	r2, r2
 80001ac:	440b      	add	r3, r1
 80001ae:	761a      	strb	r2, [r3, #24]
}
 80001b0:	bf00      	nop
 80001b2:	370c      	adds	r7, #12
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	e000e100 	.word	0xe000e100
 80001c0:	e000ed00 	.word	0xe000ed00

080001c4 <osKernel_ThreadCreate>:
static void osKernelStack_Init(uint32_t thread);
static void osSchedular_Launch(void);


osKernelReturn_t osKernel_ThreadCreate( TCB_t* task)
{
 80001c4:	b590      	push	{r4, r7, lr}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001cc:	b672      	cpsid	i
}
 80001ce:	bf00      	nop
	__disable_irq();
	if (Tasks_number <= TASKS_MAX_NUM)
 80001d0:	4b33      	ldr	r3, [pc, #204]	; (80002a0 <osKernel_ThreadCreate+0xdc>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	2b0a      	cmp	r3, #10
 80001d6:	d85c      	bhi.n	8000292 <osKernel_ThreadCreate+0xce>
	{
		tcbs[Tasks_number].callback_function = task->callback_function;
 80001d8:	4b31      	ldr	r3, [pc, #196]	; (80002a0 <osKernel_ThreadCreate+0xdc>)
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	4618      	mov	r0, r3
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	689a      	ldr	r2, [r3, #8]
 80001e2:	4930      	ldr	r1, [pc, #192]	; (80002a4 <osKernel_ThreadCreate+0xe0>)
 80001e4:	0143      	lsls	r3, r0, #5
 80001e6:	440b      	add	r3, r1
 80001e8:	3308      	adds	r3, #8
 80001ea:	601a      	str	r2, [r3, #0]
		tcbs[Tasks_number].ex_time = task->ex_time;
 80001ec:	4b2c      	ldr	r3, [pc, #176]	; (80002a0 <osKernel_ThreadCreate+0xdc>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	4618      	mov	r0, r3
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	695a      	ldr	r2, [r3, #20]
 80001f6:	492b      	ldr	r1, [pc, #172]	; (80002a4 <osKernel_ThreadCreate+0xe0>)
 80001f8:	0143      	lsls	r3, r0, #5
 80001fa:	440b      	add	r3, r1
 80001fc:	3314      	adds	r3, #20
 80001fe:	601a      	str	r2, [r3, #0]
		tcbs[Tasks_number].periodicity = task->periodicity;
 8000200:	4b27      	ldr	r3, [pc, #156]	; (80002a0 <osKernel_ThreadCreate+0xdc>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4618      	mov	r0, r3
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	691a      	ldr	r2, [r3, #16]
 800020a:	4926      	ldr	r1, [pc, #152]	; (80002a4 <osKernel_ThreadCreate+0xe0>)
 800020c:	0143      	lsls	r3, r0, #5
 800020e:	440b      	add	r3, r1
 8000210:	3310      	adds	r3, #16
 8000212:	601a      	str	r2, [r3, #0]
		tcbs[Tasks_number].priority = task->priority;
 8000214:	4b22      	ldr	r3, [pc, #136]	; (80002a0 <osKernel_ThreadCreate+0xdc>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	4618      	mov	r0, r3
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	7f59      	ldrb	r1, [r3, #29]
 800021e:	4a21      	ldr	r2, [pc, #132]	; (80002a4 <osKernel_ThreadCreate+0xe0>)
 8000220:	0143      	lsls	r3, r0, #5
 8000222:	4413      	add	r3, r2
 8000224:	331d      	adds	r3, #29
 8000226:	460a      	mov	r2, r1
 8000228:	701a      	strb	r2, [r3, #0]
		tcbs[Tasks_number].stack_size = task->stack_size;
 800022a:	4b1d      	ldr	r3, [pc, #116]	; (80002a0 <osKernel_ThreadCreate+0xdc>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4618      	mov	r0, r3
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	68da      	ldr	r2, [r3, #12]
 8000234:	491b      	ldr	r1, [pc, #108]	; (80002a4 <osKernel_ThreadCreate+0xe0>)
 8000236:	0143      	lsls	r3, r0, #5
 8000238:	440b      	add	r3, r1
 800023a:	330c      	adds	r3, #12
 800023c:	601a      	str	r2, [r3, #0]
		tcbs[Tasks_number].stack = (int32_t *)calloc(tcbs[Tasks_number].stack_size, sizeof(uint32_t));
 800023e:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <osKernel_ThreadCreate+0xdc>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <osKernel_ThreadCreate+0xe0>)
 8000244:	015b      	lsls	r3, r3, #5
 8000246:	4413      	add	r3, r2
 8000248:	330c      	adds	r3, #12
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a14      	ldr	r2, [pc, #80]	; (80002a0 <osKernel_ThreadCreate+0xdc>)
 800024e:	7812      	ldrb	r2, [r2, #0]
 8000250:	4614      	mov	r4, r2
 8000252:	2104      	movs	r1, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fa3f 	bl	80006d8 <calloc>
 800025a:	4603      	mov	r3, r0
 800025c:	4619      	mov	r1, r3
 800025e:	4a11      	ldr	r2, [pc, #68]	; (80002a4 <osKernel_ThreadCreate+0xe0>)
 8000260:	0163      	lsls	r3, r4, #5
 8000262:	4413      	add	r3, r2
 8000264:	6019      	str	r1, [r3, #0]
		tcbs[Tasks_number].index = Tasks_number;
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <osKernel_ThreadCreate+0xdc>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	4618      	mov	r0, r3
 800026c:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <osKernel_ThreadCreate+0xdc>)
 800026e:	7819      	ldrb	r1, [r3, #0]
 8000270:	4a0c      	ldr	r2, [pc, #48]	; (80002a4 <osKernel_ThreadCreate+0xe0>)
 8000272:	0143      	lsls	r3, r0, #5
 8000274:	4413      	add	r3, r2
 8000276:	331c      	adds	r3, #28
 8000278:	460a      	mov	r2, r1
 800027a:	701a      	strb	r2, [r3, #0]

		osKernelStack_Init(Tasks_number);
 800027c:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <osKernel_ThreadCreate+0xdc>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f811 	bl	80002a8 <osKernelStack_Init>

		Tasks_number++;
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <osKernel_ThreadCreate+0xdc>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	3301      	adds	r3, #1
 800028c:	b2da      	uxtb	r2, r3
 800028e:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <osKernel_ThreadCreate+0xdc>)
 8000290:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000292:	b662      	cpsie	i
}
 8000294:	bf00      	nop
	}
	__enable_irq();
}
 8000296:	bf00      	nop
 8000298:	4618      	mov	r0, r3
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bd90      	pop	{r4, r7, pc}
 80002a0:	200001b0 	.word	0x200001b0
 80002a4:	2000006c 	.word	0x2000006c

080002a8 <osKernelStack_Init>:


static void osKernelStack_Init(uint32_t index)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	uint32_t stack_size = tcbs[index].stack_size;
 80002b0:	4a48      	ldr	r2, [pc, #288]	; (80003d4 <osKernelStack_Init+0x12c>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	015b      	lsls	r3, r3, #5
 80002b6:	4413      	add	r3, r2
 80002b8:	330c      	adds	r3, #12
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	60fb      	str	r3, [r7, #12]
	/*Assign stack pointer to top of stack*/
	tcbs[index].stackpt = &tcbs[index].stack[stack_size - 16];
 80002be:	4a45      	ldr	r2, [pc, #276]	; (80003d4 <osKernelStack_Init+0x12c>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	015b      	lsls	r3, r3, #5
 80002c4:	4413      	add	r3, r2
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80002ce:	3b10      	subs	r3, #16
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	441a      	add	r2, r3
 80002d4:	493f      	ldr	r1, [pc, #252]	; (80003d4 <osKernelStack_Init+0x12c>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	015b      	lsls	r3, r3, #5
 80002da:	440b      	add	r3, r1
 80002dc:	3318      	adds	r3, #24
 80002de:	601a      	str	r2, [r3, #0]

	/*PSR register , set T-bit (bit21) to 1to operate in thumb mode*/
	tcbs[index].stack[stack_size - 1] = 1U<<24;
 80002e0:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <osKernelStack_Init+0x12c>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	015b      	lsls	r3, r3, #5
 80002e6:	4413      	add	r3, r2
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80002f0:	3b01      	subs	r3, #1
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	4413      	add	r3, r2
 80002f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002fa:	601a      	str	r2, [r3, #0]
	/*Assign PC register to point to task address*/
	tcbs[index].stack[stack_size - 2] = (int32_t)(tcbs[index].callback_function);
 80002fc:	4a35      	ldr	r2, [pc, #212]	; (80003d4 <osKernelStack_Init+0x12c>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	015b      	lsls	r3, r3, #5
 8000302:	4413      	add	r3, r2
 8000304:	3308      	adds	r3, #8
 8000306:	6819      	ldr	r1, [r3, #0]
 8000308:	4a32      	ldr	r2, [pc, #200]	; (80003d4 <osKernelStack_Init+0x12c>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	015b      	lsls	r3, r3, #5
 800030e:	4413      	add	r3, r2
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000318:	3b02      	subs	r3, #2
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	4413      	add	r3, r2
 800031e:	460a      	mov	r2, r1
 8000320:	601a      	str	r2, [r3, #0]
	/*Initialize rest of registers by dummy value (optional for debugging)*/
	tcbs[index].stack[stack_size - 3] = 0xAAAAAAAA;  /*R14 (LR)*/
 8000322:	4a2c      	ldr	r2, [pc, #176]	; (80003d4 <osKernelStack_Init+0x12c>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	015b      	lsls	r3, r3, #5
 8000328:	4413      	add	r3, r2
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000332:	3b03      	subs	r3, #3
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	4413      	add	r3, r2
 8000338:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800033c:	601a      	str	r2, [r3, #0]
	tcbs[index].stack[stack_size - 4] = 0xAAAAAAAA;  /*R12*/
 800033e:	4a25      	ldr	r2, [pc, #148]	; (80003d4 <osKernelStack_Init+0x12c>)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	015b      	lsls	r3, r3, #5
 8000344:	4413      	add	r3, r2
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800034e:	3b04      	subs	r3, #4
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	4413      	add	r3, r2
 8000354:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000358:	601a      	str	r2, [r3, #0]
	tcbs[index].stack[stack_size - 5] = 0xAAAAAAAA;  /*R3*/
 800035a:	4a1e      	ldr	r2, [pc, #120]	; (80003d4 <osKernelStack_Init+0x12c>)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	015b      	lsls	r3, r3, #5
 8000360:	4413      	add	r3, r2
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800036a:	3b05      	subs	r3, #5
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	4413      	add	r3, r2
 8000370:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000374:	601a      	str	r2, [r3, #0]
	tcbs[index].stack[stack_size - 6] = 0xAAAAAAAA;  /*R2*/
 8000376:	4a17      	ldr	r2, [pc, #92]	; (80003d4 <osKernelStack_Init+0x12c>)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	015b      	lsls	r3, r3, #5
 800037c:	4413      	add	r3, r2
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000386:	3b06      	subs	r3, #6
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	4413      	add	r3, r2
 800038c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000390:	601a      	str	r2, [r3, #0]
	tcbs[index].stack[stack_size - 7] = 0xAAAAAAAA;  /*R1*/
 8000392:	4a10      	ldr	r2, [pc, #64]	; (80003d4 <osKernelStack_Init+0x12c>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	015b      	lsls	r3, r3, #5
 8000398:	4413      	add	r3, r2
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80003a2:	3b07      	subs	r3, #7
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	4413      	add	r3, r2
 80003a8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003ac:	601a      	str	r2, [r3, #0]
	tcbs[index].stack[stack_size - 8] = 0xAAAAAAAA;  /*R0*/
 80003ae:	4a09      	ldr	r2, [pc, #36]	; (80003d4 <osKernelStack_Init+0x12c>)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	015b      	lsls	r3, r3, #5
 80003b4:	4413      	add	r3, r2
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80003be:	3b08      	subs	r3, #8
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	4413      	add	r3, r2
 80003c4:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003c8:	601a      	str	r2, [r3, #0]

}
 80003ca:	bf00      	nop
 80003cc:	3714      	adds	r7, #20
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	2000006c 	.word	0x2000006c

080003d8 <osKernel_init>:


osKernelReturn_t osKernel_init(uint32_t quanta)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	/*Create circuler linked list to link task control blocks*/
	uint8_t i;
	for (i = 0; i<Tasks_number; i++)
 80003e0:	2300      	movs	r3, #0
 80003e2:	73fb      	strb	r3, [r7, #15]
 80003e4:	e01b      	b.n	800041e <osKernel_init+0x46>
	{
		if (i+1< Tasks_number)
 80003e6:	7bfb      	ldrb	r3, [r7, #15]
 80003e8:	3301      	adds	r3, #1
 80003ea:	4a1a      	ldr	r2, [pc, #104]	; (8000454 <osKernel_init+0x7c>)
 80003ec:	7812      	ldrb	r2, [r2, #0]
 80003ee:	4293      	cmp	r3, r2
 80003f0:	da0b      	bge.n	800040a <osKernel_init+0x32>
		{
			tcbs[i].next_thread = &tcbs[i+1];
 80003f2:	7bfb      	ldrb	r3, [r7, #15]
 80003f4:	1c5a      	adds	r2, r3, #1
 80003f6:	7bfb      	ldrb	r3, [r7, #15]
 80003f8:	0152      	lsls	r2, r2, #5
 80003fa:	4917      	ldr	r1, [pc, #92]	; (8000458 <osKernel_init+0x80>)
 80003fc:	440a      	add	r2, r1
 80003fe:	4916      	ldr	r1, [pc, #88]	; (8000458 <osKernel_init+0x80>)
 8000400:	015b      	lsls	r3, r3, #5
 8000402:	440b      	add	r3, r1
 8000404:	3304      	adds	r3, #4
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	e006      	b.n	8000418 <osKernel_init+0x40>
		}
		else
		{
			tcbs[i].next_thread = &tcbs[0];
 800040a:	7bfb      	ldrb	r3, [r7, #15]
 800040c:	4a12      	ldr	r2, [pc, #72]	; (8000458 <osKernel_init+0x80>)
 800040e:	015b      	lsls	r3, r3, #5
 8000410:	4413      	add	r3, r2
 8000412:	3304      	adds	r3, #4
 8000414:	4a10      	ldr	r2, [pc, #64]	; (8000458 <osKernel_init+0x80>)
 8000416:	601a      	str	r2, [r3, #0]
	for (i = 0; i<Tasks_number; i++)
 8000418:	7bfb      	ldrb	r3, [r7, #15]
 800041a:	3301      	adds	r3, #1
 800041c:	73fb      	strb	r3, [r7, #15]
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <osKernel_init+0x7c>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	7bfa      	ldrb	r2, [r7, #15]
 8000424:	429a      	cmp	r2, r3
 8000426:	d3de      	bcc.n	80003e6 <osKernel_init+0xe>
		}
	}
	current_thread = &tcbs[0];
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <osKernel_init+0x84>)
 800042a:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <osKernel_init+0x80>)
 800042c:	601a      	str	r2, [r3, #0]
	/* configure SysTick to 1ms*/
	timebase_ReloadTimeChange(quanta * (SYSTEM_CLK/MILLIS_PRESCALER));
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000434:	fb02 f303 	mul.w	r3, r2, r3
 8000438:	4618      	mov	r0, r3
 800043a:	f000 f84d 	bl	80004d8 <timebase_ReloadTimeChange>
	/*set SysTick to low priority*/
	NVIC_SetPriority(SysTick_IRQn,15);
 800043e:	210f      	movs	r1, #15
 8000440:	f04f 30ff 	mov.w	r0, #4294967295
 8000444:	f7ff fe94 	bl	8000170 <__NVIC_SetPriority>
	/*Pass Scheduler to SysTick handler*/
//	osSchedular_Launch();
}
 8000448:	bf00      	nop
 800044a:	4618      	mov	r0, r3
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200001b0 	.word	0x200001b0
 8000458:	2000006c 	.word	0x2000006c
 800045c:	200001ac 	.word	0x200001ac

08000460 <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler(void)
{
	/*SUSPEND CURRENT THREAD*/

	/*Disable global interrupts*/
	__asm("CPSID	I");
 8000460:	b672      	cpsid	i

	/*Save r4,r5,r6,r7,r8,r9,r10,11*/
	__asm("PUSH  {R4-R11}");
 8000462:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/*Load address of current_thread into r0*/
	__asm("LDR R0, =current_thread");
 8000466:	4806      	ldr	r0, [pc, #24]	; (8000480 <SysTick_Handler+0x20>)

	/*Load r1 from address equals r0, i.e. r1 =current_thread*/
	__asm("LDR R1,[R0]");
 8000468:	6801      	ldr	r1, [r0, #0]

	/*Store Cortex-M SP at address equals r1, i.e Save SP into tcb */
	__asm("STR SP,[R1]");
 800046a:	f8c1 d000 	str.w	sp, [r1]

    /*CHOOSE NEXT THREAD*/

    /*Load r1 from a location 4bytes above address r1, i.e r1 = current_thread->next*/
	__asm("LDR R1,[R1,#4]");
 800046e:	6849      	ldr	r1, [r1, #4]

	/*Store r1 at address equals r0, i.e current_thread =  r1*/
	__asm("STR	R1,[R0]");
 8000470:	6001      	str	r1, [r0, #0]

	/*Load Cortex-M SP from address equals r1, i.e SP =  current_thread->stackPt*/
	__asm("LDR SP,[R1]");
 8000472:	f8d1 d000 	ldr.w	sp, [r1]

	/*Restore r4,r5,r6,r7,r8,r9,r10,11*/
	__asm("POP {R4-R11}");
 8000476:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/*Enable global interrupts*/
	__asm("CPSIE	I");
 800047a:	b662      	cpsie	i

	/*Return from exception and restore r0,r1,r2,r3,r12,lr,pc,psr */
	__asm("BX	LR");
 800047c:	4770      	bx	lr



}
 800047e:	bf00      	nop
 8000480:	200001ac 	.word	0x200001ac

08000484 <timebase_init>:
callback_function_t SysTick_callbackFn = NULL;

uint32_t Systick_cnt = 0;

void timebase_init(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	/*Reload the timer with number of cycles per second*/
	SysTick->LOAD = ONE_SEC_LOAD -1;
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <timebase_init+0x4c>)
 800048a:	4a12      	ldr	r2, [pc, #72]	; (80004d4 <timebase_init+0x50>)
 800048c:	605a      	str	r2, [r3, #4]
	/*Clear Systick current value*/
	SysTick->VAL = 0;
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <timebase_init+0x4c>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
	/*Select internal clock source*/
	SysTick->CTRL |=  SYSTICK_CTRL_CLK_SRC;
 8000494:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <timebase_init+0x4c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a0d      	ldr	r2, [pc, #52]	; (80004d0 <timebase_init+0x4c>)
 800049a:	f043 0304 	orr.w	r3, r3, #4
 800049e:	6013      	str	r3, [r2, #0]
	/*Enable  tick interrupt*/
	SysTick->CTRL |=  SYSTICK_CTRL_TICK_INT;
 80004a0:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <timebase_init+0x4c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <timebase_init+0x4c>)
 80004a6:	f043 0302 	orr.w	r3, r3, #2
 80004aa:	6013      	str	r3, [r2, #0]
	/*Enable count flag*/
	SysTick->CTRL |=  SYSTICK_CTRL_COUNT_FLAG;
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <timebase_init+0x4c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a07      	ldr	r2, [pc, #28]	; (80004d0 <timebase_init+0x4c>)
 80004b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004b6:	6013      	str	r3, [r2, #0]
	/*Enable SysTick*/
	SysTick->CTRL |=  SYSTICK_CTRL_ENABLE;
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <timebase_init+0x4c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <timebase_init+0x4c>)
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80004c4:	b662      	cpsie	i
}
 80004c6:	bf00      	nop
	/*Enable global interrupt*/
	__enable_irq();

}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	e000e010 	.word	0xe000e010
 80004d4:	007a11ff 	.word	0x007a11ff

080004d8 <timebase_ReloadTimeChange>:
	uint32_t destination = current_systick_cnt + seconds;
	while(SysTick_TickGet() <= destination);
}

void timebase_ReloadTimeChange(uint32_t time)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	if (time)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d016      	beq.n	8000514 <timebase_ReloadTimeChange+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
 80004e6:	b672      	cpsid	i
}
 80004e8:	bf00      	nop
	{
		__disable_irq();
		/*disable systick*/
		SysTick->CTRL &= (~SYSTICK_CTRL_ENABLE);
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <timebase_ReloadTimeChange+0x48>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <timebase_ReloadTimeChange+0x48>)
 80004f0:	f023 0301 	bic.w	r3, r3, #1
 80004f4:	6013      	str	r3, [r2, #0]
		/*Reload the timer with number of cycles per second*/
		SysTick->LOAD = time -1;
 80004f6:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <timebase_ReloadTimeChange+0x48>)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	3b01      	subs	r3, #1
 80004fc:	6053      	str	r3, [r2, #4]
		/*Clear Systick current value*/
		SysTick->VAL = 0;
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <timebase_ReloadTimeChange+0x48>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
		/*Enable SysTick*/
		SysTick->CTRL |=  SYSTICK_CTRL_ENABLE;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <timebase_ReloadTimeChange+0x48>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a05      	ldr	r2, [pc, #20]	; (8000520 <timebase_ReloadTimeChange+0x48>)
 800050a:	f043 0301 	orr.w	r3, r3, #1
 800050e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000510:	b662      	cpsie	i
}
 8000512:	bf00      	nop
		__enable_irq();
	}
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e000e010 	.word	0xe000e010

08000524 <main>:
void Task1();
void Task2();
void Task0();

int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b098      	sub	sp, #96	; 0x60
 8000528:	af00      	add	r7, sp, #0
	TCB_t Thread0 = {0};
 800052a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800052e:	2220      	movs	r2, #32
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f998 	bl	8000868 <memset>
	Thread0.stack_size = 100;
 8000538:	2364      	movs	r3, #100	; 0x64
 800053a:	64fb      	str	r3, [r7, #76]	; 0x4c
	Thread0.callback_function = Task0;
 800053c:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <main+0xa4>)
 800053e:	64bb      	str	r3, [r7, #72]	; 0x48

	TCB_t Thread1 = {0};
 8000540:	f107 0320 	add.w	r3, r7, #32
 8000544:	2220      	movs	r2, #32
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f000 f98d 	bl	8000868 <memset>
	Thread1.stack_size = 200;
 800054e:	23c8      	movs	r3, #200	; 0xc8
 8000550:	62fb      	str	r3, [r7, #44]	; 0x2c
	Thread1.callback_function = Task1;
 8000552:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <main+0xa8>)
 8000554:	62bb      	str	r3, [r7, #40]	; 0x28

	TCB_t Thread2 = {0};
 8000556:	463b      	mov	r3, r7
 8000558:	2220      	movs	r2, #32
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f000 f983 	bl	8000868 <memset>
	Thread2.stack_size = 200;
 8000562:	23c8      	movs	r3, #200	; 0xc8
 8000564:	60fb      	str	r3, [r7, #12]
	Thread2.callback_function = Task2;
 8000566:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <main+0xac>)
 8000568:	60bb      	str	r3, [r7, #8]


	RCC->AHBENR |= RCC_APB2ENR_IOPAEN;
 800056a:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <main+0xb0>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <main+0xb0>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	6153      	str	r3, [r2, #20]
	GPIOC->CRH = 0;
 8000576:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <main+0xb4>)
 8000578:	2200      	movs	r2, #0
 800057a:	605a      	str	r2, [r3, #4]
	GPIOC->CRH |= (1 << 20);
 800057c:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <main+0xb4>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <main+0xb4>)
 8000582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000586:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= (1 << 22);
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <main+0xb4>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <main+0xb4>)
 800058e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000592:	6053      	str	r3, [r2, #4]
	timebase_init();
 8000594:	f7ff ff76 	bl	8000484 <timebase_init>
	osKernel_ThreadCreate(&Thread0);
 8000598:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff fe11 	bl	80001c4 <osKernel_ThreadCreate>
	osKernel_ThreadCreate(&Thread1);
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff fe0c 	bl	80001c4 <osKernel_ThreadCreate>
	osKernel_ThreadCreate(&Thread2);
 80005ac:	463b      	mov	r3, r7
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fe08 	bl	80001c4 <osKernel_ThreadCreate>
	osKernel_init(10);
 80005b4:	200a      	movs	r0, #10
 80005b6:	f7ff ff0f 	bl	80003d8 <osKernel_init>

    while(1)
    {
    	GPIOC->BSRR |= 1<<13;
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <main+0xb4>)
 80005bc:	691b      	ldr	r3, [r3, #16]
 80005be:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <main+0xb4>)
 80005c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005c4:	6113      	str	r3, [r2, #16]
 80005c6:	e7f8      	b.n	80005ba <main+0x96>
 80005c8:	080005dd 	.word	0x080005dd
 80005cc:	080005f1 	.word	0x080005f1
 80005d0:	08000605 	.word	0x08000605
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40011000 	.word	0x40011000

080005dc <Task0>:
//    	Systick_Delay(1);
    }

}
void Task0()
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	while(1)
	{
		Task0_counter++;
 80005e0:	4b02      	ldr	r3, [pc, #8]	; (80005ec <Task0+0x10>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a01      	ldr	r2, [pc, #4]	; (80005ec <Task0+0x10>)
 80005e8:	6013      	str	r3, [r2, #0]
 80005ea:	e7f9      	b.n	80005e0 <Task0+0x4>
 80005ec:	200001b4 	.word	0x200001b4

080005f0 <Task1>:
	}
}

void Task1()
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	while(1)
	{
		Task1_counter++;
 80005f4:	4b02      	ldr	r3, [pc, #8]	; (8000600 <Task1+0x10>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	4a01      	ldr	r2, [pc, #4]	; (8000600 <Task1+0x10>)
 80005fc:	6013      	str	r3, [r2, #0]
 80005fe:	e7f9      	b.n	80005f4 <Task1+0x4>
 8000600:	200001b8 	.word	0x200001b8

08000604 <Task2>:
	}
}
void Task2()
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
	while(1)
	{
		Task2_counter++;
 8000608:	4b02      	ldr	r3, [pc, #8]	; (8000614 <Task2+0x10>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3301      	adds	r3, #1
 800060e:	4a01      	ldr	r2, [pc, #4]	; (8000614 <Task2+0x10>)
 8000610:	6013      	str	r3, [r2, #0]
 8000612:	e7f9      	b.n	8000608 <Task2+0x4>
 8000614:	200001bc 	.word	0x200001bc

08000618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000620:	4a14      	ldr	r2, [pc, #80]	; (8000674 <_sbrk+0x5c>)
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <_sbrk+0x60>)
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <_sbrk+0x64>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d102      	bne.n	800063a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <_sbrk+0x64>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <_sbrk+0x68>)
 8000638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <_sbrk+0x64>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	429a      	cmp	r2, r3
 8000646:	d207      	bcs.n	8000658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000648:	f000 f926 	bl	8000898 <__errno>
 800064c:	4603      	mov	r3, r0
 800064e:	220c      	movs	r2, #12
 8000650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	e009      	b.n	800066c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <_sbrk+0x64>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800065e:	4b07      	ldr	r3, [pc, #28]	; (800067c <_sbrk+0x64>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	4a05      	ldr	r2, [pc, #20]	; (800067c <_sbrk+0x64>)
 8000668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800066a:	68fb      	ldr	r3, [r7, #12]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20005000 	.word	0x20005000
 8000678:	00000400 	.word	0x00000400
 800067c:	200001c0 	.word	0x200001c0
 8000680:	20000310 	.word	0x20000310

08000684 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000686:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000688:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800068c:	480c      	ldr	r0, [pc, #48]	; (80006c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800068e:	490d      	ldr	r1, [pc, #52]	; (80006c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000690:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <LoopForever+0xe>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a4:	4c0a      	ldr	r4, [pc, #40]	; (80006d0 <LoopForever+0x16>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006b2:	f000 f8f7 	bl	80008a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b6:	f7ff ff35 	bl	8000524 <main>

080006ba <LoopForever>:

LoopForever:
  b LoopForever
 80006ba:	e7fe      	b.n	80006ba <LoopForever>
  ldr   r0, =_estack
 80006bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80006c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c4:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80006c8:	08000910 	.word	0x08000910
  ldr r2, =_sbss
 80006cc:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80006d0:	2000030c 	.word	0x2000030c

080006d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <ADC1_2_IRQHandler>
	...

080006d8 <calloc>:
 80006d8:	4b02      	ldr	r3, [pc, #8]	; (80006e4 <calloc+0xc>)
 80006da:	460a      	mov	r2, r1
 80006dc:	4601      	mov	r1, r0
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	f000 b802 	b.w	80006e8 <_calloc_r>
 80006e4:	2000004c 	.word	0x2000004c

080006e8 <_calloc_r>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	fba1 5402 	umull	r5, r4, r1, r2
 80006ee:	b934      	cbnz	r4, 80006fe <_calloc_r+0x16>
 80006f0:	4629      	mov	r1, r5
 80006f2:	f000 f82d 	bl	8000750 <_malloc_r>
 80006f6:	4606      	mov	r6, r0
 80006f8:	b928      	cbnz	r0, 8000706 <_calloc_r+0x1e>
 80006fa:	4630      	mov	r0, r6
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	220c      	movs	r2, #12
 8000700:	2600      	movs	r6, #0
 8000702:	6002      	str	r2, [r0, #0]
 8000704:	e7f9      	b.n	80006fa <_calloc_r+0x12>
 8000706:	462a      	mov	r2, r5
 8000708:	4621      	mov	r1, r4
 800070a:	f000 f8ad 	bl	8000868 <memset>
 800070e:	e7f4      	b.n	80006fa <_calloc_r+0x12>

08000710 <sbrk_aligned>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	4e0e      	ldr	r6, [pc, #56]	; (800074c <sbrk_aligned+0x3c>)
 8000714:	460c      	mov	r4, r1
 8000716:	6831      	ldr	r1, [r6, #0]
 8000718:	4605      	mov	r5, r0
 800071a:	b911      	cbnz	r1, 8000722 <sbrk_aligned+0x12>
 800071c:	f000 f8ac 	bl	8000878 <_sbrk_r>
 8000720:	6030      	str	r0, [r6, #0]
 8000722:	4621      	mov	r1, r4
 8000724:	4628      	mov	r0, r5
 8000726:	f000 f8a7 	bl	8000878 <_sbrk_r>
 800072a:	1c43      	adds	r3, r0, #1
 800072c:	d00a      	beq.n	8000744 <sbrk_aligned+0x34>
 800072e:	1cc4      	adds	r4, r0, #3
 8000730:	f024 0403 	bic.w	r4, r4, #3
 8000734:	42a0      	cmp	r0, r4
 8000736:	d007      	beq.n	8000748 <sbrk_aligned+0x38>
 8000738:	1a21      	subs	r1, r4, r0
 800073a:	4628      	mov	r0, r5
 800073c:	f000 f89c 	bl	8000878 <_sbrk_r>
 8000740:	3001      	adds	r0, #1
 8000742:	d101      	bne.n	8000748 <sbrk_aligned+0x38>
 8000744:	f04f 34ff 	mov.w	r4, #4294967295
 8000748:	4620      	mov	r0, r4
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	200001c8 	.word	0x200001c8

08000750 <_malloc_r>:
 8000750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000754:	1ccd      	adds	r5, r1, #3
 8000756:	f025 0503 	bic.w	r5, r5, #3
 800075a:	3508      	adds	r5, #8
 800075c:	2d0c      	cmp	r5, #12
 800075e:	bf38      	it	cc
 8000760:	250c      	movcc	r5, #12
 8000762:	2d00      	cmp	r5, #0
 8000764:	4607      	mov	r7, r0
 8000766:	db01      	blt.n	800076c <_malloc_r+0x1c>
 8000768:	42a9      	cmp	r1, r5
 800076a:	d905      	bls.n	8000778 <_malloc_r+0x28>
 800076c:	230c      	movs	r3, #12
 800076e:	2600      	movs	r6, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4630      	mov	r0, r6
 8000774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000778:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800084c <_malloc_r+0xfc>
 800077c:	f000 f868 	bl	8000850 <__malloc_lock>
 8000780:	f8d8 3000 	ldr.w	r3, [r8]
 8000784:	461c      	mov	r4, r3
 8000786:	bb5c      	cbnz	r4, 80007e0 <_malloc_r+0x90>
 8000788:	4629      	mov	r1, r5
 800078a:	4638      	mov	r0, r7
 800078c:	f7ff ffc0 	bl	8000710 <sbrk_aligned>
 8000790:	1c43      	adds	r3, r0, #1
 8000792:	4604      	mov	r4, r0
 8000794:	d155      	bne.n	8000842 <_malloc_r+0xf2>
 8000796:	f8d8 4000 	ldr.w	r4, [r8]
 800079a:	4626      	mov	r6, r4
 800079c:	2e00      	cmp	r6, #0
 800079e:	d145      	bne.n	800082c <_malloc_r+0xdc>
 80007a0:	2c00      	cmp	r4, #0
 80007a2:	d048      	beq.n	8000836 <_malloc_r+0xe6>
 80007a4:	6823      	ldr	r3, [r4, #0]
 80007a6:	4631      	mov	r1, r6
 80007a8:	4638      	mov	r0, r7
 80007aa:	eb04 0903 	add.w	r9, r4, r3
 80007ae:	f000 f863 	bl	8000878 <_sbrk_r>
 80007b2:	4581      	cmp	r9, r0
 80007b4:	d13f      	bne.n	8000836 <_malloc_r+0xe6>
 80007b6:	6821      	ldr	r1, [r4, #0]
 80007b8:	4638      	mov	r0, r7
 80007ba:	1a6d      	subs	r5, r5, r1
 80007bc:	4629      	mov	r1, r5
 80007be:	f7ff ffa7 	bl	8000710 <sbrk_aligned>
 80007c2:	3001      	adds	r0, #1
 80007c4:	d037      	beq.n	8000836 <_malloc_r+0xe6>
 80007c6:	6823      	ldr	r3, [r4, #0]
 80007c8:	442b      	add	r3, r5
 80007ca:	6023      	str	r3, [r4, #0]
 80007cc:	f8d8 3000 	ldr.w	r3, [r8]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d038      	beq.n	8000846 <_malloc_r+0xf6>
 80007d4:	685a      	ldr	r2, [r3, #4]
 80007d6:	42a2      	cmp	r2, r4
 80007d8:	d12b      	bne.n	8000832 <_malloc_r+0xe2>
 80007da:	2200      	movs	r2, #0
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	e00f      	b.n	8000800 <_malloc_r+0xb0>
 80007e0:	6822      	ldr	r2, [r4, #0]
 80007e2:	1b52      	subs	r2, r2, r5
 80007e4:	d41f      	bmi.n	8000826 <_malloc_r+0xd6>
 80007e6:	2a0b      	cmp	r2, #11
 80007e8:	d917      	bls.n	800081a <_malloc_r+0xca>
 80007ea:	1961      	adds	r1, r4, r5
 80007ec:	42a3      	cmp	r3, r4
 80007ee:	6025      	str	r5, [r4, #0]
 80007f0:	bf18      	it	ne
 80007f2:	6059      	strne	r1, [r3, #4]
 80007f4:	6863      	ldr	r3, [r4, #4]
 80007f6:	bf08      	it	eq
 80007f8:	f8c8 1000 	streq.w	r1, [r8]
 80007fc:	5162      	str	r2, [r4, r5]
 80007fe:	604b      	str	r3, [r1, #4]
 8000800:	4638      	mov	r0, r7
 8000802:	f104 060b 	add.w	r6, r4, #11
 8000806:	f000 f829 	bl	800085c <__malloc_unlock>
 800080a:	f026 0607 	bic.w	r6, r6, #7
 800080e:	1d23      	adds	r3, r4, #4
 8000810:	1af2      	subs	r2, r6, r3
 8000812:	d0ae      	beq.n	8000772 <_malloc_r+0x22>
 8000814:	1b9b      	subs	r3, r3, r6
 8000816:	50a3      	str	r3, [r4, r2]
 8000818:	e7ab      	b.n	8000772 <_malloc_r+0x22>
 800081a:	42a3      	cmp	r3, r4
 800081c:	6862      	ldr	r2, [r4, #4]
 800081e:	d1dd      	bne.n	80007dc <_malloc_r+0x8c>
 8000820:	f8c8 2000 	str.w	r2, [r8]
 8000824:	e7ec      	b.n	8000800 <_malloc_r+0xb0>
 8000826:	4623      	mov	r3, r4
 8000828:	6864      	ldr	r4, [r4, #4]
 800082a:	e7ac      	b.n	8000786 <_malloc_r+0x36>
 800082c:	4634      	mov	r4, r6
 800082e:	6876      	ldr	r6, [r6, #4]
 8000830:	e7b4      	b.n	800079c <_malloc_r+0x4c>
 8000832:	4613      	mov	r3, r2
 8000834:	e7cc      	b.n	80007d0 <_malloc_r+0x80>
 8000836:	230c      	movs	r3, #12
 8000838:	4638      	mov	r0, r7
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	f000 f80e 	bl	800085c <__malloc_unlock>
 8000840:	e797      	b.n	8000772 <_malloc_r+0x22>
 8000842:	6025      	str	r5, [r4, #0]
 8000844:	e7dc      	b.n	8000800 <_malloc_r+0xb0>
 8000846:	605b      	str	r3, [r3, #4]
 8000848:	deff      	udf	#255	; 0xff
 800084a:	bf00      	nop
 800084c:	200001c4 	.word	0x200001c4

08000850 <__malloc_lock>:
 8000850:	4801      	ldr	r0, [pc, #4]	; (8000858 <__malloc_lock+0x8>)
 8000852:	f000 b84b 	b.w	80008ec <__retarget_lock_acquire_recursive>
 8000856:	bf00      	nop
 8000858:	20000308 	.word	0x20000308

0800085c <__malloc_unlock>:
 800085c:	4801      	ldr	r0, [pc, #4]	; (8000864 <__malloc_unlock+0x8>)
 800085e:	f000 b846 	b.w	80008ee <__retarget_lock_release_recursive>
 8000862:	bf00      	nop
 8000864:	20000308 	.word	0x20000308

08000868 <memset>:
 8000868:	4603      	mov	r3, r0
 800086a:	4402      	add	r2, r0
 800086c:	4293      	cmp	r3, r2
 800086e:	d100      	bne.n	8000872 <memset+0xa>
 8000870:	4770      	bx	lr
 8000872:	f803 1b01 	strb.w	r1, [r3], #1
 8000876:	e7f9      	b.n	800086c <memset+0x4>

08000878 <_sbrk_r>:
 8000878:	b538      	push	{r3, r4, r5, lr}
 800087a:	2300      	movs	r3, #0
 800087c:	4d05      	ldr	r5, [pc, #20]	; (8000894 <_sbrk_r+0x1c>)
 800087e:	4604      	mov	r4, r0
 8000880:	4608      	mov	r0, r1
 8000882:	602b      	str	r3, [r5, #0]
 8000884:	f7ff fec8 	bl	8000618 <_sbrk>
 8000888:	1c43      	adds	r3, r0, #1
 800088a:	d102      	bne.n	8000892 <_sbrk_r+0x1a>
 800088c:	682b      	ldr	r3, [r5, #0]
 800088e:	b103      	cbz	r3, 8000892 <_sbrk_r+0x1a>
 8000890:	6023      	str	r3, [r4, #0]
 8000892:	bd38      	pop	{r3, r4, r5, pc}
 8000894:	20000304 	.word	0x20000304

08000898 <__errno>:
 8000898:	4b01      	ldr	r3, [pc, #4]	; (80008a0 <__errno+0x8>)
 800089a:	6818      	ldr	r0, [r3, #0]
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	2000004c 	.word	0x2000004c

080008a4 <__libc_init_array>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	2600      	movs	r6, #0
 80008a8:	4d0c      	ldr	r5, [pc, #48]	; (80008dc <__libc_init_array+0x38>)
 80008aa:	4c0d      	ldr	r4, [pc, #52]	; (80008e0 <__libc_init_array+0x3c>)
 80008ac:	1b64      	subs	r4, r4, r5
 80008ae:	10a4      	asrs	r4, r4, #2
 80008b0:	42a6      	cmp	r6, r4
 80008b2:	d109      	bne.n	80008c8 <__libc_init_array+0x24>
 80008b4:	f000 f81c 	bl	80008f0 <_init>
 80008b8:	2600      	movs	r6, #0
 80008ba:	4d0a      	ldr	r5, [pc, #40]	; (80008e4 <__libc_init_array+0x40>)
 80008bc:	4c0a      	ldr	r4, [pc, #40]	; (80008e8 <__libc_init_array+0x44>)
 80008be:	1b64      	subs	r4, r4, r5
 80008c0:	10a4      	asrs	r4, r4, #2
 80008c2:	42a6      	cmp	r6, r4
 80008c4:	d105      	bne.n	80008d2 <__libc_init_array+0x2e>
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
 80008c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80008cc:	4798      	blx	r3
 80008ce:	3601      	adds	r6, #1
 80008d0:	e7ee      	b.n	80008b0 <__libc_init_array+0xc>
 80008d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80008d6:	4798      	blx	r3
 80008d8:	3601      	adds	r6, #1
 80008da:	e7f2      	b.n	80008c2 <__libc_init_array+0x1e>
 80008dc:	08000908 	.word	0x08000908
 80008e0:	08000908 	.word	0x08000908
 80008e4:	08000908 	.word	0x08000908
 80008e8:	0800090c 	.word	0x0800090c

080008ec <__retarget_lock_acquire_recursive>:
 80008ec:	4770      	bx	lr

080008ee <__retarget_lock_release_recursive>:
 80008ee:	4770      	bx	lr

080008f0 <_init>:
 80008f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008f2:	bf00      	nop
 80008f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008f6:	bc08      	pop	{r3}
 80008f8:	469e      	mov	lr, r3
 80008fa:	4770      	bx	lr

080008fc <_fini>:
 80008fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008fe:	bf00      	nop
 8000900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000902:	bc08      	pop	{r3}
 8000904:	469e      	mov	lr, r3
 8000906:	4770      	bx	lr
