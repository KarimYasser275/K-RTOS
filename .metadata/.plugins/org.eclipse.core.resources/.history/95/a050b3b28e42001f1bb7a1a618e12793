/*
 * osKernel.c
 *
 *  Created on: Jul 12, 2024
 *      Author: E0162112
 */


#include "osKernel.h"
#include <stdlib.h>

#define SYSTEM_CLK				8000000U
#define MILLIS_PRESCALER		1000U
#define TASKS_MAX_NUM			10U
TCB_t tcbs[TASKS_MAX_NUM] = {0};
TCB_t* current_thread;
uint8_t Tasks_number = 0;
uint32_t TCB_Stack[NUM_OF_THREADS][STACK_SIZE];

uint32_t debug_scheduler_counter;
static void osKernelStack_Init(uint32_t thread);


osKernelReturn_t osKernel_ThreadCreate( TCB_t* task)
{
	__disable_irq();
	if (Tasks_number <= TASKS_MAX_NUM)
	{
		tcbs[Tasks_number].callback_function = task->callback_function;
		tcbs[Tasks_number].ex_time = task->ex_time;
		tcbs[Tasks_number].periodicity = task->periodicity;
		tcbs[Tasks_number].priority = task->priority;
		tcbs[Tasks_number].stack_size = task->stack_size;
		tcbs[Tasks_number].stack = (uint32_t *)calloc(tcbs[index].stack_size, sizeof(uint32_t));
		tcbs[Tasks_number].index = Tasks_number;

		osKernelStack_Init(Tasks_number);

		Tasks_number++;
	}
	__enable_irq();
}


static void osKernelStack_Init(uint32_t index)
{
	/*PSR register , set T-bit (bit21) to 1to operate in thumb mode*/
	tcbs[index].stack[tcbs[index].stack_size - 1] = 1U<<21;
	/*Assign PC register to point to task address*/
	tcbs[index].stack[tcbs[index].stack_size - 2] = tcbs[index].callback_function;
	/*Initialize rest of registers by dummy value (optional for debugging)*/
	tcbs[index].stack[tcbs[index].stack_size - 3] = 0xAAAAAAAA;  /*R14 (LR)*/
	tcbs[index].stack[tcbs[index].stack_size - 4] = 0xAAAAAAAA;  /*R12*/
	tcbs[index].stack[tcbs[index].stack_size - 5] = 0xAAAAAAAA;  /*R3*/
	tcbs[index].stack[tcbs[index].stack_size - 6] = 0xAAAAAAAA;  /*R2*/
	tcbs[index].stack[tcbs[index].stack_size - 7] = 0xAAAAAAAA;  /*R1*/
	tcbs[index].stack[tcbs[index].stack_size - 8] = 0xAAAAAAAA;  /*R0*/
	/*Assign stack pointer to top of stack*/
	tcbs[index].stackpt = tcbs[index].stack[tcbs[index].stack_size - 16];
}


static void osKernel_Scheduler(void)
{

	debug_scheduler_counter++;
}

osKernelReturn_t osKernel_init(uint32_t quanta)
{
	/*Create circuler linked list to link task control blocks*/
	uint8_t i;
	for (i = 0; i<Tasks_number; i++)
	{
		if (i+1< Tasks_number)
		{
			tcbs[i].next_thread = &tcbs[i+1];
		}
		else
		{
			tcbs[i].next_thread = &tcbs[0];
		}
	}

	/* configure SysTick to 1ms*/
	timebase_ReloadTimeChange(quanta * (SYSTEM_CLK/MILLIS_PRESCALER));
	/*set SysTick to low priority*/
	NVIC_SetPriority(SysTick_IRQn,15);
	/*Pass Scheduler to SysTick handler*/
	SysTick_HandlerSet(osKernel_Scheduler);
}

